(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.BlinderWidget = {}));
})(this, (function (exports) { 'use strict';

  class Handler {
      constructor(containerId, mode) {
          this.handlerMode = 1;
          this.eventListeners = {};
          this.API_URL = "https://hdztvyc5ga.execute-api.us-east-1.amazonaws.com";
          this.userID = '';
          this.clientID = '';
          this.newCertID = '';
          this.newCopyrightID = '';
          const _this = this;
          this.container = document.getElementById(containerId);
          this.iframe = document.createElement("iframe");
          this.container.appendChild(this.iframe);
          this.handlerMode = mode;
          // this.iframe = document.getElementById(iframeId) as HTMLIFrameElement;
          if (this.handlerMode === 1) {
              this.loadIframe('http://44.216.209.92:3300/withfile.html?cache_bust=' + new Date().getTime());
          }
          else {
              this.loadIframe('http://44.216.209.92:3300/?cache_bust=' + new Date().getTime());
          }
          this.messageListener = this.handlePostMessage.bind(this);
          window.addEventListener('message', this.messageListener, false);
          this.on('loginUser', async (data) => {
              var _a, _b;
              const userInfo = await _this.createUser(data);
              if (userInfo) {
                  _this.setUserID(userInfo === null || userInfo === void 0 ? void 0 : userInfo.userID);
                  (_a = _this.iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage({
                      type: 'userLoggedIn',
                      data: {
                          userID: userInfo.userID,
                      }
                  }, '*');
              }
              else {
                  (_b = _this.iframe.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage({
                      type: 'loginError',
                      data: {}
                  }, '*');
              }
          });
          this.on('requestS3Path', async (data) => {
              var _a, _b;
              const res = await this.getAwsS3SignedURL(data.filename, data.filetype);
              if (!res) {
                  console.error("[BLINDERAI] error on getAwsS3SignedURL");
                  (_a = _this.iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage({
                      type: 's3path',
                      data: {
                          success: false,
                      }
                  }, '*');
              }
              else {
                  (_b = _this.iframe.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage({
                      type: 's3path',
                      data: {
                          success: true,
                          url: res.url,
                          s3path: res.s3path,
                      }
                  }, '*');
              }
          });
      }
      on(event, callback) {
          if (!this.eventListeners[event]) {
              this.eventListeners[event] = [];
          }
          this.eventListeners[event].push(callback);
      }
      emit(event, data) {
          const listeners = this.eventListeners[event];
          if (listeners) {
              listeners.forEach((callback) => callback(data));
          }
      }
      loadIframe(url) {
          if (this.iframe) {
              this.iframe.src = url;
              this.iframe.style.width = '100%';
              this.iframe.style.height = '800px';
          }
      }
      handlePostMessage(event) {
          // if (event.origin !== 'https://copyright.blinderai.com') {
          //   console.warn('Received message from unauthorized origin:', event.origin);
          //   return;
          // }
          const data = event.data;
          if (data) {
              if (data.type === 'confirm_copyright') {
                  this.emit('confirmCopyright', data.data);
              }
              else if (data.type === 'confirm_payment') {
                  this.emit('confirmPayment', data.data);
              }
              else if (data.type === 'login_user') {
                  this.emit('loginUser', data.data);
              }
              else if (data.type === 'request_s3path') {
                  this.emit('requestS3Path', data.data);
              }
          }
      }
      requestPayment(copyrightID) {
          var _a;
          (_a = this.iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage({
              type: 'requestPayment',
              data: {
                  copyrightID,
                  clientID: this.clientID,
                  userID: this.userID,
              }
          }, '*');
      }
      notifyCopyrightError() {
          var _a;
          (_a = this.iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage({
              type: 'createCopyrightError',
              data: {}
          }, '*');
      }
      paymentConfirmed() {
          var _a;
          (_a = this.iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage({
              type: 'paymentConfirmed',
              data: {
                  copyrightID: this.newCopyrightID,
              }
          }, '*');
      }
      generateRequestHeader() {
          return {
              'Content-Type': 'application/json',
              '_x_auth_id': this.clientID,
              '_x_auth_user': this.userID,
          };
      }
      setClientID(id) {
          this.clientID = id;
      }
      setUserID(id) {
          this.userID = id;
      }
      async createUser(data) {
          const apiEndpoint = `${this.API_URL}/v1/create-user`;
          try {
              const response = await fetch(apiEndpoint, {
                  method: 'POST',
                  headers: this.generateRequestHeader(),
                  body: JSON.stringify(data),
              });
              if (response.ok) {
                  return await response.json();
              }
          }
          catch (error) {
              console.error('[BLINDERAI] Error sending data to API:', error);
          }
          return null;
      }
      async getCopyrightIntentToken() {
          const apiEndpoint = `${this.API_URL}/v1/intent-key`;
          try {
              const response = await fetch(apiEndpoint, {
                  method: 'GET',
                  headers: this.generateRequestHeader(),
              });
              if (response.ok) {
                  return await response.json();
              }
          }
          catch (error) {
              console.error('[BLINDERAI] Error sending data to API:', error);
          }
          return null;
      }
      async getAwsS3SignedURL(filename, filetype) {
          const apiEndpoint = `${this.API_URL}/v1/s3-signed-url`;
          try {
              const url = new URL(apiEndpoint);
              url.searchParams.append("filename", filename);
              url.searchParams.append("filetype", filetype);
              const response = await fetch(url.toString(), {
                  method: 'GET',
                  headers: this.generateRequestHeader(),
              });
              if (response.ok) {
                  return await response.json();
              }
          }
          catch (error) {
              console.error('[BLINDERAI] Error sending data to API:', error);
          }
          return null;
      }
      async processUpload(url, content, filetype, cb) {
          try {
              const response = await fetch(url, {
                  method: 'PUT',
                  headers: {
                      'Content-Type': filetype,
                  },
                  body: content,
              });
              if (response.ok) {
                  return true;
              }
              console.error('[BLINDERAI] File upload error!');
          }
          catch (error) {
              console.error('[BLINDERAI] Error uploading file:', error);
          }
          return false;
      }
      async uploadMedia(filename, content, filetype, cb) {
          const res = await this.getAwsS3SignedURL(filename, filetype);
          if (!res) {
              console.error("[BLINDERAI] error on getAwsS3SignedURL");
              return null;
          }
          const uploadRes = await this.processUpload(res.url, content, filetype, cb);
          if (!uploadRes) {
              return null;
          }
          return res;
      }
      async createCopyright(copyrightInfo, mediaInfo) {
          const apiEndpoint = `${this.API_URL}/v1/request-copyright`;
          try {
              const response = await fetch(apiEndpoint, {
                  method: 'POST',
                  headers: this.generateRequestHeader(),
                  body: JSON.stringify({
                      cert: copyrightInfo,
                      file: mediaInfo,
                  })
              });
              if (response.ok) {
                  const res = await response.json();
                  this.newCertID = res.id;
                  this.newCopyrightID = res.copyrightID;
                  return res;
              }
          }
          catch (error) {
              console.error('[BLINDERAI] Error sending data to API:', error);
          }
          return null;
      }
      async confirmPayment(tokens) {
          const apiEndpoint = `${this.API_URL}/v1/confirm-payment`;
          try {
              const body = JSON.stringify({
                  locationId: tokens.locationID,
                  sourceId: tokens.token,
                  verificationToken: tokens.verificationToken,
                  idempotencyKey: window.crypto.randomUUID(),
                  certID: this.newCertID,
                  copyrightID: this.newCopyrightID,
              });
              const paymentResponse = await fetch(apiEndpoint, {
                  method: 'POST',
                  headers: this.generateRequestHeader(),
                  body,
              });
              if (paymentResponse.ok) {
                  return paymentResponse.json();
              }
          }
          catch (error) {
              console.error('[BLINDERAI]  Error sending data to API:', error);
          }
          return null;
      }
      cleanup() {
          // window.removeEventListener('message', this.messageListener, false);
          this.container.removeChild(this.iframe);
          window.removeEventListener('message', this.messageListener, false);
      }
  }

  exports.Handler = Handler;

}));
//# sourceMappingURL=blinder-widget-web.min.js.map
